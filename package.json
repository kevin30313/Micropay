{
  "name": "micropay-microservices",
  "version": "1.0.0",
  "description": "Microservices orchestration project for MicroPay fintech",
  "main": "src/api-gateway/server.js",
  "scripts": {
    "start": "node src/api-gateway/server.js",
    "start:users": "node src/services/users/server.js",
    "start:payments": "node src/services/payments/server.js",
    "start:notifications": "node src/services/notifications/server.js",
    "start:orders": "node src/services/orders/server.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:integration": "jest --testPathPattern=integration",
    "test:unit": "jest --testPathPattern=__tests__",
    "test:all": "./scripts/test-runner.sh all",
    "dev": "concurrently \"npm run start:users\" \"npm run start:payments\" \"npm run start:notifications\" \"npm run start:orders\" \"npm start\"",
    "docker:build": "docker-compose build",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "k8s:deploy": "kubectl apply -f kubernetes/",
    "terraform:init": "cd terraform && terraform init",
    "terraform:plan": "cd terraform && terraform plan",
    "terraform:apply": "cd terraform && terraform apply",
    "terraform:destroy": "cd terraform && terraform destroy",
    "deploy:full": "./scripts/deploy.sh full",
    "deploy:infra": "./scripts/deploy.sh infra",
    "deploy:app": "./scripts/deploy.sh app"
  },
  "keywords": ["microservices", "kubernetes", "aws", "fintech", "api-gateway"],
  "author": "MicroPay Development Team",
  "license": "MIT",
  "dependencies": {
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.2",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "helmet": "^7.1.0",
    "morgan": "^1.10.0",
    "axios": "^1.6.2",
    "uuid": "^9.0.1",
    "winston": "^3.11.0",
    "express-rate-limit": "^7.1.5",
    "concurrently": "^8.2.2"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "supertest": "^6.3.3",
    "nodemon": "^3.0.2"
  },
  "jest": {
    "testEnvironment": "node",
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coverageReporters": ["text", "lcov", "html"],
    "collectCoverageFrom": [
      "src/**/*.js",
      "!src/**/server.js"
    ],
    "testMatch": ["**/__tests__/**/*.test.js"]
  }
}